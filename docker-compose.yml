services:
    backend:
        container_name: Backend
        build:
            context: ./backend
            dockerfile: Dockerfile
        ports:
            - '8080:8080'
        network:
            - proxy
        environment:
            SPRING_PROFILES_ACTIVE: docker
            DB_USER: ${DB_USER}
            DB_PASSWORD: ${DB_PASSWORD}
            DB_NAME: ${DB_NAME}
            SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
            SPRING_JPA_HIBERNATE_DDL_AUTO: update
            JWT_SECRET_KEY: ${JWT_SECRET_KEY}
            JWT_EXPIRATION_TIME: ${JWT_EXPIRATION_TIME:-86400000}
            CORS_ALLOWED_ORIGIN: ${CORS_ALLOWED_ORIGIN:-http://localhost:4200}
        depends_on:
            db:
                condition: service_healthy
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.backend.rule=Host(`stockofrigo.huntcraft.fr`)"
            - "traefik.http.routers.backend.entrypoints=websecure"
            - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
            # --- IMPORTANT ---
            # Indique à Traefik que ton app Spring Boot tourne sur le port 8080 
            # à l'intérieur de son conteneur.
            - "traefik.http.services.backend.loadbalancer.server.port=8080"
            # Pas besoin d'exposer de 'ports:' ici, Traefik s'en charge.
    
    frontend:
        container_name: Frontend
        build:
            context: ./frontend
            dockerfile: Dockerfile
        ports:
            - '80:80'
        depends_on:
            - backend
        networks:
        - proxy
        labels:
        - "traefik.enable=true"
        # Le domaine principal
        - "traefik.http.routers.frontend.rule=Host(`www.ton-domaine.com`)"
        - "traefik.http.routers.frontend.entrypoints=websecure"
        - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
        # Nginx sert les fichiers statiques sur le port 80 par défaut
        - "traefik.http.services.frontend.loadbalancer.server.port=80"


    db:
        container_name: stocko_frigo_db
        image: mysql:5.7
        ports:
            - '3306:3306'
        environment:
            MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
            MYSQL_DATABASE: ${DB_NAME}
            MYSQL_USER: ${DB_USER}
            MYSQL_PASSWORD: ${DB_PASSWORD}
        healthcheck:
            test: ['CMD-SHELL', 'mysqladmin ping -h 127.0.0.1 -u${DB_USER} -p${DB_PASSWORD} --silent']
            interval: 5s
            timeout: 5s
            retries: 20
        volumes:
            - db-data:/var/lib/mysql
    adminer:
        image: adminer:latest
        restart: always
        ports:
            - '8081:8080'

volumes:
    db-data:
